#!/usr/bin/env perl
use warnings;
use strict;
use Modern::Perl '2011';
use autodie;
use Smart::Comments;
use warnings FATAL => 'uninitialized';
use Date::Manip;
use POSIX qw(strftime);
use Date::Calc qw(Day_of_Year);
use Tie::IxHash;

unless (@ARGV>=3) {
	die << "EOT";
Usage: $0 <infile.fasta>  <n chain>  <n repport>
This tools reformate fasta IDs for treetime and BEAST analyze 
Example: $0 test.fasta 10000 1000000
EOT
}

## Input files
my $seq_file = shift;
my $chain = shift;
my $report = shift;
my $report2 = $report*10 ;

my ($outname) = $seq_file =~ m/([^\/]+)\.\w+/g;
$outname = join "" , $outname,'expo_formated';

## Seq analysis

tie my %seq_for, 'Tie::IxHash';
%seq_for= read_fasta( $seq_file );

my @keys = keys %seq_for;
## @keys
## x: scalar @keys
die if (scalar @keys < 3);

## %seq_for

my $num = keys (%seq_for);
my @tet = keys (%seq_for);
my $len = length ($seq_for{$tet[1]}{"sequence"});
### $num



## Start printing 
my $outfile1 = join "" , $outname,'.xml';
open my $out, '>',  $outfile1;

say {$out} '<?xml version="1.0" standalone="yes"?>

<!-- Generated by BEAUTi v1.10.4 Prerelease #bc6cbd9                         -->
<!--       by Alexei J. Drummond, Andrew Rambaut and Marc A. Suchard         -->
<!--       Department of Computer Science, University of Auckland and        -->
<!--       Institute of Evolutionary Biology, University of Edinburgh        -->
<!--       David Geffen School of Medicine, University of California, Los Angeles-->
<!--       http://beast.community/                                           -->
<beast version="1.10.4">
	

	<!-- The list of taxa to be analysed (can also include dates/ages).          -->';
say {$out}	"<!-- ntax=$num                                                                -->";
say {$out}	'	<taxa id="taxa">';

for my $ids (keys %seq_for){
	
	my $data = $seq_for{$ids}{"date"};
	my $uncertainty = $seq_for{$ids}{"incertenity"};
	
	if ($uncertainty >0 ){
	
	say {$out} qq(		<taxon id="$ids">
						<date value="$data" direction="forwards" units="years" uncertainty="$uncertainty"/>
				</taxon>);
	}
	
	else{
	
	say {$out} qq(		<taxon id="$ids">
						<date value="$data" direction="forwards" units="years" />
				</taxon>);
	}
	
	
}



say {$out} qq(
	</taxa>
	
	

	<!-- The sequence alignment (each sequence refers to a taxon above).         -->
	<!-- ntax=$num nchar=$len                                                    -->
	<alignment id="alignment" dataType="nucleotide">);
	
	
for my $ids (keys %seq_for){
	
	my $seqence= $seq_for{$ids}{"sequence"};
	say {$out} qq(	<sequence>
			<taxon idref="$ids"/>);
	say {$out} $seqence;
	say {$out} '		</sequence>';


}

#	<!-- npatterns=34438                                                         -->

say {$out} qq(		</alignment>

	<!-- The patterns from 1 to end                                              -->
	<!-- npatterns=34948                                                         -->
	<patterns id="patterns" from="1" unique="false">
		<alignment idref="alignment"/>
	</patterns>
	

	<!-- A prior assumption that the population size has grown exponentially     -->
	<!-- throughout the time spanned by the genealogy.                           -->
	<exponentialGrowth id="exponential" units="years">
		<populationSize>
			<parameter id="exponential.popSize" value="1.0" lower="0.0"/>
		</populationSize>
		<growthRate>
			<parameter id="exponential.growthRate" value="0.0"/>
		</growthRate>
	</exponentialGrowth>
	

	<!-- Generate a random starting tree under the coalescent process            -->
	<coalescentSimulator id="startingTree">
		<taxa idref="taxa"/>
		<exponentialGrowth idref="exponential"/>
	</coalescentSimulator>
	

	<!-- Generate a tree model                                                   -->
	<treeModel id="treeModel">
		<coalescentTree idref="startingTree"/>
		<rootHeight>
			<parameter id="treeModel.rootHeight"/>
		</rootHeight>
		<nodeHeights internalNodes="true">
			<parameter id="treeModel.internalNodeHeights"/>
		</nodeHeights>
		<nodeHeights internalNodes="true" rootNode="true">
			<parameter id="treeModel.allInternalNodeHeights"/>
		</nodeHeights>

		<!-- START Tip date sampling                                                 -->);
		
		
for my $ids (keys %seq_for){
		
	if ($seq_for{$ids}{"incertenity"} >0 ){
	
		say {$out} qq(<leafHeight taxon="$ids">
				<parameter id="age($ids)"/>
			</leafHeight>);
	};

}

say {$out} qq(

	<!-- END Tip date sampling                                                   -->

	</treeModel>

	<!-- Statistic for sum of the branch lengths of the tree (tree length)       -->
	<treeLengthStatistic id="treeLength">
		<treeModel idref="treeModel"/>
	</treeLengthStatistic>

	<!-- Statistic for time of most recent common ancestor of tree               -->
	<tmrcaStatistic id="age(root)" absolute="true">
		<treeModel idref="treeModel"/>
	</tmrcaStatistic>
	

	<!-- Generate a coalescent likelihood                                        -->
	<coalescentLikelihood id="coalescent">
		<model>
			<exponentialGrowth idref="exponential"/>
		</model>
		<populationTree>
			<treeModel idref="treeModel"/>
		</populationTree>
	</coalescentLikelihood>
	

	<!-- The uncorrelated relaxed clock (Drummond, Ho, Phillips & Rambaut (2006) PLoS Biology 4, e88 )-->
	<discretizedBranchRates id="branchRates">
		<treeModel idref="treeModel"/>
		<distribution>
			<logNormalDistributionModel meanInRealSpace="true">
				<mean>
					<parameter id="ucld.mean" value="1.0" lower="0.0"/>
				</mean>
				<stdev>
					<parameter id="ucld.stdev" value="0.3333333333333333" lower="0.0"/>
				</stdev>
			</logNormalDistributionModel>
		</distribution>
		<rateCategories>
			<parameter id="branchRates.categories"/>
		</rateCategories>
	</discretizedBranchRates>
	
	<rateStatistic id="meanRate" name="meanRate" mode="mean" internal="true" external="true">
		<treeModel idref="treeModel"/>
		<discretizedBranchRates idref="branchRates"/>
	</rateStatistic>
	
	<rateStatistic id="coefficientOfVariation" name="coefficientOfVariation" mode="coefficientOfVariation" internal="true" external="true">
		<treeModel idref="treeModel"/>
		<discretizedBranchRates idref="branchRates"/>
	</rateStatistic>
	
	<rateCovarianceStatistic id="covariance" name="covariance">
		<treeModel idref="treeModel"/>
		<discretizedBranchRates idref="branchRates"/>
	</rateCovarianceStatistic>
	

	<!-- The general time reversible (GTR) substitution model                    -->
	<gtrModel id="gtr">
		<frequencies>
			<frequencyModel dataType="nucleotide">
				<frequencies>
					<parameter id="frequencies" value="0.25 0.25 0.25 0.25"/>
				</frequencies>
			</frequencyModel>
		</frequencies>
		<rates>
			<parameter id="gtr.rates" dimension="6" value="1.0" lower="0.0"/>
		</rates>
	</gtrModel>

	<!-- site model                                                              -->
	<siteModel id="siteModel">
		<substitutionModel>
			<gtrModel idref="gtr"/>
		</substitutionModel>
		<gammaShape gammaCategories="4">
			<parameter id="alpha" value="0.5" lower="0.0"/>
		</gammaShape>
		<proportionInvariant>
			<parameter id="pInv" value="0.5" lower="0.0" upper="1.0"/>
		</proportionInvariant>
	</siteModel>

	<!--                                                                         -->
	<statistic id="mu" name="mu">
		<siteModel idref="siteModel"/>
	</statistic>
	

	<!-- Likelihood for tree given sequence data                                 -->
	<ancestralTreeLikelihood id="treeLikelihood" useAmbiguities="false" stateTagName="states">
		<patterns idref="patterns"/>
		<treeModel idref="treeModel"/>
		<siteModel idref="siteModel"/>
		<discretizedBranchRates idref="branchRates"/>
	</ancestralTreeLikelihood>
	

	<!-- Define operators                                                        -->
	<operators id="operators" optimizationSchedule="default">
		<deltaExchange delta="0.01" weight="1">
			<parameter idref="gtr.rates"/>
		</deltaExchange>
		<deltaExchange delta="0.01" weight="1">
			<parameter idref="frequencies"/>
		</deltaExchange>
		<scaleOperator scaleFactor="0.75" weight="1">
			<parameter idref="alpha"/>
		</scaleOperator>
		<randomWalkOperator windowSize="0.75" weight="1" boundaryCondition="logit">
			<parameter idref="pInv"/>
		</randomWalkOperator>
		<scaleOperator scaleFactor="0.75" weight="3">
			<parameter idref="ucld.mean"/>
		</scaleOperator>
		<scaleOperator scaleFactor="0.75" weight="3">
			<parameter idref="ucld.stdev"/>
		</scaleOperator>
		<upDownOperator scaleFactor="0.75" weight="3">
			<up>
				<parameter idref="treeModel.allInternalNodeHeights"/>
			</up>
			<down>
				<parameter idref="ucld.mean"/>
			</down>
		</upDownOperator>
		<swapOperator size="1" weight="10" autoOptimize="false">
			<parameter idref="branchRates.categories"/>
		</swapOperator>
		<uniformIntegerOperator weight="10">
			<parameter idref="branchRates.categories"/>
		</uniformIntegerOperator>
		<subtreeSlide size="1.0" gaussian="true" weight="30">
			<treeModel idref="treeModel"/>
		</subtreeSlide>
		<narrowExchange weight="30">
			<treeModel idref="treeModel"/>
		</narrowExchange>
		<wideExchange weight="3">
			<treeModel idref="treeModel"/>
		</wideExchange>
		<wilsonBalding weight="3">
			<treeModel idref="treeModel"/>
		</wilsonBalding>
		<scaleOperator scaleFactor="0.75" weight="3">
			<parameter idref="treeModel.rootHeight"/>
		</scaleOperator>
		<uniformOperator weight="30">
			<parameter idref="treeModel.internalNodeHeights"/>
		</uniformOperator>
		<scaleOperator scaleFactor="0.75" weight="3">
			<parameter idref="exponential.popSize"/>
		</scaleOperator>
		<randomWalkOperator windowSize="1.0" weight="3">
			<parameter idref="exponential.growthRate"/>
		</randomWalkOperator>);


for my $ids (keys %seq_for){
		
	if ($seq_for{$ids}{"incertenity"} >0 ){
	
		say {$out} qq(<uniformOperator weight="1">
					<parameter idref="age($ids)"/>
		</uniformOperator>);
	};
};

say {$out} qq(

	</operators>
	

	<!-- Define MCMC                                                             -->
	<mcmc id="mcmc" chainLength="$chain" autoOptimize="true">
		<joint id="joint">
			<prior id="prior">
				<dirichletPrior alpha="1.0" sumsTo="6.0">
					<parameter idref="gtr.rates"/>
				</dirichletPrior>
				<dirichletPrior alpha="1.0" sumsTo="1.0">
					<parameter idref="frequencies"/>
				</dirichletPrior>
				<exponentialPrior mean="0.5" offset="0.0">
					<parameter idref="alpha"/>
				</exponentialPrior>
				<uniformPrior lower="0.0" upper="1.0">
					<parameter idref="pInv"/>
				</uniformPrior>
				<ctmcScalePrior>
					<ctmcScale>
						<parameter idref="ucld.mean"/>
					</ctmcScale>
					<treeModel idref="treeModel"/>
				</ctmcScalePrior>
				<exponentialPrior mean="0.3333333333333333" offset="0.0">
					<parameter idref="ucld.stdev"/>
				</exponentialPrior>
				<oneOnXPrior>
					<parameter idref="exponential.popSize"/>
				</oneOnXPrior>
				<coalescentLikelihood idref="coalescent"/>
				
				
				<discretizedBranchRates idref="branchRates"/>
			</prior>
			<likelihood id="likelihood">
				<ancestralTreeLikelihood idref="treeLikelihood"/>
			</likelihood>
		</joint>
		<operators idref="operators"/>

		<!-- write log to screen                                                     -->
		
		<log id="screenLog" logEvery="$report">
			<column label="Joint" dp="4" width="12">
				<joint idref="joint"/>
			</column>
			<column label="Prior" dp="4" width="12">
				<prior idref="prior"/>
			</column>
			<column label="Likelihood" dp="4" width="12">
				<likelihood idref="likelihood"/>
			</column>
			<column label="age(root)" sf="6" width="12">
				<tmrcaStatistic idref="age(root)"/>
			</column>
			<column label="ucld.mean" sf="6" width="12">
				<parameter idref="ucld.mean"/>
			</column>
		</log>

		<!-- write log to file                                                       -->
		<log id="fileLog" logEvery="$report" fileName="$outname.log" overwrite="true">
		<joint idref="joint"/>
			<prior idref="prior"/>
			<likelihood idref="likelihood"/>
			<parameter idref="treeModel.rootHeight"/>
			<tmrcaStatistic idref="age(root)"/>
			<treeLengthStatistic idref="treeLength"/>
			<parameter idref="exponential.popSize"/>
			<parameter idref="exponential.growthRate"/>
			<parameter idref="gtr.rates"/>
			<parameter idref="frequencies"/>
			<parameter idref="alpha"/>
			<parameter idref="pInv"/>
			<parameter idref="ucld.mean"/>
			<parameter idref="ucld.stdev"/>
			<rateStatistic idref="meanRate"/>
			<rateStatistic idref="coefficientOfVariation"/>
			<rateCovarianceStatistic idref="covariance"/>

			<!-- START Tip date sampling                                                 -->);
		
		
for my $ids (keys %seq_for){
		
	if ($seq_for{$ids}{"incertenity"} >0 ){
	
		say {$out} qq(<parameter idref="age($ids)"/>);
	};

}

say {$out} qq(
			<!-- END Tip date sampling                                                   -->

			<ancestralTreeLikelihood idref="treeLikelihood"/>
			<discretizedBranchRates idref="branchRates"/>
			<coalescentLikelihood idref="coalescent"/>
			
		</log>

		<!-- write tree log to file                                                  -->
		<logTree id="treeFileLog" logEvery="$report2" nexusFormat="true" fileName="$outname.trees" sortTranslationTable="true">
		<treeModel idref="treeModel"/>
			<trait name="rate" tag="rate">
				<discretizedBranchRates idref="branchRates"/>
			</trait>
			<joint idref="joint"/>

		
			<!-- START Ancestral state reconstruction                                    -->
			<trait name="states" tag="$outname">
				<ancestralTreeLikelihood idref="treeLikelihood"/>
			</trait>

			<!-- END Ancestral state reconstruction                                      -->

		</logTree>
	</mcmc>
	
	<report>
		<property name="timer">
			<mcmc idref="mcmc"/>
		</property>
	</report>
	
</beast>);

close $out;



# Functions

sub read_fasta {

	my $infile = shift ;	

	## Reading input file: $infile
	## Elapsed time |===[%]

	open my $in, '<', $infile;
	my $testage;
	my $seq_id;
	my $seq;
	my $dates;
	my $date_convert;
	my $incertenity = 0;
	tie my %seq_for,'Tie::IxHash';
	
	LINE:
		while (my $line = <$in> ){
		chomp $line;
		
		# at each '>' char...
		if ($line =~ m/(.*\|([\d\-]+))/xms) {
			
		 # add current seq to hash  (if any)
		 if($seq) {
			 
			#if ($seq_id =~ m/.+\|[\d\-]+/xms) {
			if ($date_convert ne "nononono"){
				$seq_for{$seq_id} = {
					
					sequence => $seq,
					date => $date_convert,
					incertenity => $incertenity
			
				};
			
			};
			
			$seq = q{};
			$incertenity = 0;
			}
		
			# extract new seq_id
			$seq_id = $1;
			$dates = $2; 
			
			### START
			### $dates
			
			my $jdate ;
			my $tot= 0;
			my $tet;
			my $tet2;
			if ($dates =~ m/(\d{4})\/\d{4}/xms){$dates = $1};
			### $dates
			if ($dates =~ m/^(\d)\d$/xms){
			
				if ($1 =~ m/^[012]{2}$/xms){
					
					$dates = join "", 20, $dates;
				
				}else{
				
					$dates = join "", 19, $dates;
				
				};
			
			};
			
			### $dates
			
			
			
			my ($yo) = $dates =~ m/^(\d{4}).*/xms;
			
			### $dates
			### $yo
			
			if ($dates =~ m/^\d{4}\-\d{2}$/xms){ $incertenity = 0.08333333333333333;
				my($y,$m)=split "-", $dates;
				my $d = 1;
				$jdate = Day_of_Year($y, $m, $d);
				$tet = (($jdate/365.00000365)-0.002739726);
				$tet2 = sprintf("%.4f", $tet);
				($tot) = $tet2 =~ m/0.(\d+)/xms;
			};

			if ($dates =~ m/^\d{4}\-\d{2}-\d{2}$/xms){
				my($y,$m,$d)=split "-", $dates;
				$jdate = Day_of_Year($y, $m, $d);
				$tet = (($jdate/365.00000365)-0.002739726);
				$tet2 = sprintf("%.4f", $tet);
				($tot) = $tet2 =~ m/0.(\d+)/xms;
				
				### $jdate
				### $tot
			};

			
			if ($dates =~ m/^\d{4}$/xms){ $incertenity = 1.0;
				$tot = 0;
			};
			
			if ( ! defined $yo ){
				
				$date_convert = "nononono";
				next LINE;
			
			};

			$date_convert = join ".",$yo,$tot ; 
	### $dates
			### $yo
			### fin
			next LINE;
			
		}
		# elongate current seq (seq can be broken sevetal lines)
		$seq .= $line;
	}
### $date_convert

### fin
	#add last seq to hash (if any)
	if ($date_convert ne "nononono"){
			$seq_for{$seq_id} = {
				sequence => $seq,
				date => $date_convert,
				incertenity => $incertenity
			} if $seq;
			
		};

	close $in;

	return %seq_for;
}







